#macro ( ExpandParameterValue $value )
#set ($printedValue = $value)
#set ($needsQuotes = $value.GetType().Name == "String" || $value.GetType().Name == "DateTime")
#if ($value.GetType().Name == "Boolean")
#if ($value) #set ($printedValue = "true")
#else #set ($printedValue = "false")
#end
#end
#if ($needsQuotes)
"#end  
$printedValue#if ($needsQuotes)"#end
#end
using System;
using MbUnit.Framework;

namespace ${testSuite.Namespace}
{
    /// <summary>
    /// ${testSuite.Description}
    /// </summary>
    [TestFixture]
    public class ${testSuite.TestSuiteName}TestSuite
    {
#foreach ( $testCase in ${testSuite.ListTestCases()} )	
        /// <summary>
        /// ${testCase.TestCaseDescription}
        /// </summary>
        [Test]
#foreach ( $tag in ${testCase.Tags} )
        [Metadata("UserStory", "$tag")]
#end
#if (${testSuite.IsParallelizable})
        [Parallelizable]
#end
        public void ${testCase.TestCaseName}()
        {
            using (${testSuite.TestRunnerName}TestRunner runner = suiteRunner.CreateTestRunner("${testCase.TestCaseName}"))
            {
                try
                {
                    runner
                        .SetDescription("${testCase.TestCaseDescription}")
#foreach ( $tag in ${testCase.Tags})
                        .AddTag("${tag}")#if ($velocityCount == $testCase.Tags.Count);#end
#each

#end
#if ( false == ${testSuite.ShouldBeSkipped} )
#if ( ${testCase.TestSteps.Count} > 0 )

#foreach ($testStep in ${testCase.TestSteps})
                    // ${testStep.ExpandDescriptionWithParameterValues(${testSuite.BusinessActionsRepository})}
                    runner.${testStep.ActionName}(#if ($testStep.Parameters.Count > 0)
#foreach ($parameter in $testStep.Parameters)
#set ($parameterValue = $parameter.ParameterValue)
#if ($testStep.Parameters.Count > 1)

                        #end#ExpandParameterValue($parameterValue)#if ($velocityCount < $testStep.Parameters.Count)
,#end#end#end
);
#if ($velocityCount < $testCase.TestSteps.Count)

#end
#end
#end
#else
                    runner.MarkTestAsPending ("Test suite is marked for skipping.");
#end
                }
                catch (NotImplementedException ex)
                {
                    runner.MarkTestAsPending(ex.Message);
                }
            }
        }

#end
        /// <summary>
        /// Test fixture setup code.
        /// </summary>
        [FixtureSetUp]
        public void FixtureSetup()
        {
            suiteRunner = new ${testSuite.TestRunnerName}TestSuiteRunner("$testSuite.TestSuiteName");
#if (${testSuite.IsParallelizable})
            Gallio.Framework.Pattern.PatternTestGlobals.DegreeOfParallelism = ${testSuite.DegreeOfParallelism};
#end
        }

        /// <summary>
        /// Test fixture teardown code.
        /// </summary>
        [FixtureTearDown]
        public void FixtureTeardown()
        {
            suiteRunner.Dispose();
        }
        
        private ${testSuite.TestRunnerName}TestSuiteRunner suiteRunner;
    }
}
